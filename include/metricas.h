#pragma once
#include <iostream>
#include <iomanip>
#include "UdeATunes.h"
#include "lista.h" // Se necesita para acceder a Lista<T>::getIteraciones()
#include "cancion.h" // Se necesita para especificar el tipo en la plantilla Lista<T>
using namespace std;

// ------------------------------------------------------------
// üíæ Estimaci√≥n del uso total de memoria (versi√≥n portable)
// ------------------------------------------------------------
inline size_t calcularMemoriaTotal(const UdeATunes& app) {
    size_t memoria = 0;

    // Tama√±o base de las listas
    memoria += sizeof(app.getCanciones());
    memoria += sizeof(app.getAlbumes());
    memoria += sizeof(app.getArtistas());
    memoria += sizeof(app.getUsuarios());

    // Estimaci√≥n: cada puntero ocupa sizeof(void*)
    memoria += (app.getCanciones().tamanio() +
                app.getAlbumes().tamanio() +
                app.getArtistas().tamanio() +
                app.getUsuarios().tamanio()) * sizeof(void*);

    // Estimaci√≥n de objetos concretos
    memoria += app.getCanciones().tamanio() * sizeof(Cancion);
    // Nota: El tama√±o de Album/Artista/Usuario puede variar, usamos sizeof(void*) como aproximaci√≥n
    memoria += app.getAlbumes().tamanio() * sizeof(Album);
    memoria += app.getArtistas().tamanio() * sizeof(Artista);
    memoria += app.getUsuarios().tamanio() * sizeof(Usuario);

    // ‚úÖ Ajuste: reservas internas o atributos adicionales
    memoria += 512; // margen base por variables locales peque√±as

    return memoria;
}

// Se necesita para sizeof(Usuario) en calcularMemoriaTotal

// ... (c√≥digo de calcularMemoriaTotal y mostrarMetricas, se mantienen)

// ------------------------------------------------------------
// ‚è±Ô∏è Medir y ejecutar una funci√≥n (CORREGIDO: Limpiar antes de medir)
// ------------------------------------------------------------
template <typename F>
void medirEjecucion(const string& nombre, UdeATunes& app, F funcion) {
    cout << "\n‚û° Ejecutando: " << nombre << endl;

    // 1. üí° REINICIAR: Limpia el contador global de iteraciones
    Lista<Cancion*>::limpiarIteraciones();

    // 2. OBTENER EL CONTEO DE ITERACIONES ANTES DE LA EJECUCI√ìN (Ahora es 0)
    int iteracionesInicio = Lista<Cancion*>::getIteraciones();

    // 3. EJECUTAR LA FUNCI√ìN (Aqu√≠ se generan las iteraciones)
    funcion();

    // 4. OBTENER EL CONTEO DE ITERACIONES DESPU√âS DE LA EJECUCI√ìN
    // (Ser√° el total de iteraciones de la funci√≥n ejecutada)
    int iteracionesFin = Lista<Cancion*>::getIteraciones();

    // 5. MOSTRAR M√âTRICAS
    cout << "--- M√âTRICAS DE EFICIENCIA ---\n";
    // Si iteracionesInicio es 0, el resultado es el valor final.
    cout << "Iteraciones realizadas: " << (iteracionesFin - iteracionesInicio) << endl;
    cout << "Memoria total estimada: " << fixed << setprecision(2)
         << (calcularMemoriaTotal(app) / 1024.0) << " KB" << endl;
}
